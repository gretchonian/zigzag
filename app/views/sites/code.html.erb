<div class="second">
  <div class="container-fluid">
    <div class="code-header col-12 text-left">
      <h1>Examples - Object-Oriented Programming</h1>
    </div>
    <div class="row"> 
      <div class="alg col-md-4">
        <div class="green-box">
          <h4><u>Linked List Challenge</u></h4>
          <p>Reverse a Linked List</p>
        </div>
        <div class="code text-left">
<pre><code class="language-ruby">class Node
  attr_accessor :value, :next_node

  def initialize(value, next_node=nil)
    @value = value
    @next_node = next_node
  end
end

def reverse_list(list, previous=nil)
  while list !=nil
    head = Node.new(list.value, head) 
    list = list.next_node
  end
  head
end

def print_values(list_node)
  if list_node
    print "#{list_node.value} --> "
    print_values(list_node.next_node)
  else
    print "nil\n"
    return
  end
end

node1 = Node.new(37)
node2 = Node.new(99, node1)
node3 = Node.new(12, node2)

print_values(node3)

puts "---------"

reverse = reverse_list(node3)

print_values(reverse)</code></pre>      
        </div>
      </div>
      <div class="alg col-md-4">   
        <div class="green-box"> 
          <h4><u>Linked List Challenge</u></h4>
          <p>Mutate a Linked List</p>
        </div>
        <div class="code text-left"> 
<pre><code class="language-ruby">class Node
  attr_accessor :value, :next_node

  def initialize(value, next_node=nil)
    @value = value
    @next_node = next_node
  end
end

def reverse_list(list, previous=nil) 
  current = list
  previous = nil
  while current != nil
    next_node = current.next_node 
    current.next_node = previous 
    previous = current  
    current = next_node 
  end
  previous
end

def print_values(list_node)
  if list_node
    print "#{list_node.value} --> "
    print_values(list_node.next_node)
  else
    print "nil\n"
    return
  end
end

node1 = Node.new(37)
node2 = Node.new(99, node1)
node3 = Node.new(12, node2)

print_values(node3)

puts "---------"

reverse = reverse_list(node3)

print_values(reverse)</code></pre>  
        </div>
      </div>
      <div class="alg col-md-4">   
        <div class="green-box"> 
          <h4><u>Card Challenge</u></h4>
          <p>Create a deck of cards</p>
        </div>
        <div class="code text-left"> 
<pre><code class="language-ruby">class Card
  attr_accessor :rank, :suit

  def initialize(rank, suit)
    self.rank = rank
    self.suit = suit
  end

  def output_card
    puts "#{self.rank} of #{self.suit}"
  end

  def self.random_card
    Card.new(self.rank, self.suit)
  end
end

class Deck

  def initialize
    @rank =['A','2','3','4','5','6','7','8','9','10','J','Q','K']
    @suit = ['Spades', 'Hearts', 'Diamonds', 'Clubs']
    @cards = []
    @rank.each do |rank|
      @suit.each do |suit|
        @cards << Card.new(rank, suit)
      end
    end
  end

  def shuffle
    @shuffled = @cards.shuffle!
  end

  def deal
    @cards.each do |deal|
    deal.output_card
    end
  end
  
  def deal_one
    @cards.shift
  end

end

dealer = Deck.new
dealer.shuffle
dealer.deal_one.output_card</code></pre>  
        </div>
      </div>
    </div>       
  <br class =""/>
  <div class="code-header col-12 text-left">
      <h1>Examples - Algorithms</h1>
    </div>
    <div class="row"> 
      <div class="alg col-md-4">
        <div class="green-box">
          <h4><u>Foobar Challenge</u></h4>
          <p>Asks for user input and counts from 1 to user's number while adding "Foo", "Bar", or "Foobar", for numbers divisible by 3, 5, or both, respectivily</p>
        </div>
        <div class="code text-left">
<pre><code class="language-ruby">puts &quot;Enter a number:&quot;
response = gets.to_i
foobar = []
(1..response).each do |n|
  if n%3 == 0 &amp;&amp;  n%5 != 0
    foobar &lt;&lt; &quot;Foo&quot;
  elsif n%5 == 0 &amp;&amp; n%3!=0
    foobar &lt;&lt; &quot;Bar&quot;
  elsif n%3 == 0 &amp;&amp; n%5 == 0
    foobar &lt;&lt; &quot;Foobar&quot;
  else 
    foobar &lt;&lt; n
  end
end
puts foobar</code></pre>      
        </div>
      </div>
      <div class="alg col-md-4">   
        <div class="green-box"> 
          <h4><u>Ordinal Challenge</u></h4>
          <p>Returns any number with a "nd" or a "rd", etc.</p>
        </div>
        <div class="code text-left"> 
<pre><code class="language-ruby">puts &quot;Enter a number&quot;
number=gets.to_i

def ordinal(number)
lop_num = number%10
  if number == 0
    return puts &quot;0&quot;
  elsif lop_num==1 &amp;&amp; number!=11
    return puts &quot;#{number}st&quot;
  elsif lop_num==2 &amp;&amp; number !=12
    return puts &quot;#{number}nd&quot;
  elsif lop_num==3 &amp;&amp; number!=13
    return puts &quot;#{number}rd&quot;
  else lop_num&gt;=4 
    return puts &quot;#{number}th&quot;
  end
end
ordinal(number)</code></pre>  
        </div>
      </div>
      <div class="alg col-md-4">   
        <div class="green-box"> 
          <h4><u>Luhn Challenge</u></h4>
          <p>Validates a series of numbers using a checksum formula.</p>
        </div>
        <div class="code text-left"> 
<pre><code class="language-ruby">module Luhn
  def self.is_valid?(number)
    reverse = reverse_digits(number)
    odds = every_other_odd? reverse
    sort_add_verify odds
  end

  def self.sort_add_verify(number)
    number.map { |e| e >= 10 ? e - 9 : e }.reduce(:+) % 10 == 0 
  end

  def self.every_other_odd?(number)
    number.each_with_index.map { |e, i| i.odd? ? e * 2 : e }
  end

  def self.reverse_digits(number)
    number.to_s.chars.map(&:to_i).reverse
  end
end</code></pre>  
        </div>
      </div>
    </div>
  </div>
</div>